<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rocksdb on Bad Fd</title>
    <link>/tags/rocksdb/</link>
    <description>Recent content in rocksdb on Bad Fd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 21 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/rocksdb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rocksdb的blockcache的一些优化点</title>
      <link>/posts/db_rocksdb%E7%9A%84blockcache%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96%E7%82%B9/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/db_rocksdb%E7%9A%84blockcache%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96%E7%82%B9/</guid>
      <description>&lt;h1 id=&#34;引子&#34;&gt;引子&lt;/h1&gt;
&lt;p&gt;记一些突然间的想法，防止后续忘了，以下是正文。&lt;/p&gt;
&lt;h1 id=&#34;blockcahe的问题&#34;&gt;blockcahe的问题&lt;/h1&gt;
&lt;p&gt;rocksdb的blockcache目前遇到的，主要有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;官方实现中没有回收机制.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>rocksdb性能压测</title>
      <link>/drafts/db_rocksdb%E6%80%A7%E8%83%BD%E5%8E%8B%E6%B5%8B/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/drafts/db_rocksdb%E6%80%A7%E8%83%BD%E5%8E%8B%E6%B5%8B/</guid>
      <description>&lt;p&gt;压测rocksdb引擎，有两种思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己写一个benchmark工具：
根据自己关心的kv pattern和access pattern，生成对应的kv pairs，然后入库，并发起对应的请求，最后收集结果。
通常不同类型的数据库都有符合不同数据模型的负载模型和不同的建模，如：TP型数据库的TPCxxx，AP型数据库的xxxx，图数据库的LDBC等。
这类思路下有很多相关工具，如：&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>rocksdb性能压测</title>
      <link>/posts/db_rocksdb%E6%80%A7%E8%83%BD%E5%8E%8B%E6%B5%8B/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/db_rocksdb%E6%80%A7%E8%83%BD%E5%8E%8B%E6%B5%8B/</guid>
      <description>&lt;p&gt;压测rocksdb引擎，有两种思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己写一个benchmark工具：
根据自己关心的kv pattern和access pattern，生成对应的kv pairs，然后入库，并发起对应的请求，最后收集结果。
通常不同类型的数据库都有符合不同数据模型的负载模型和不同的建模，如：TP型数据库的TPCxxx，AP型数据库的xxxx，图数据库的LDBC等。
这类思路下有很多相关工具，如：&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>wal recovery would cleanup at least the first WAL</title>
      <link>/posts/db_wal-recovery-would-cleanup-at-least-the-first-wal/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/db_wal-recovery-would-cleanup-at-least-the-first-wal/</guid>
      <description>&lt;p&gt;这段时间跟同事尝试修复长期以来项目中遗留的Rocksdb的Case，遇到些有意思的Case，这里记录一下。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h2 id=&#34;some-tips-for-rocksdb-case-fixing&#34;&gt;some tips for rocksdb case fixing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于不支持&lt;code&gt;-march=native&lt;/code&gt;环境的，可以编译时&lt;code&gt;export USE_SSE=1&lt;/code&gt;.避免类似&lt;code&gt;no such instruction: &lt;/code&gt;shlx %r13,%rax,%rax&#39;`的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于rocksdb的测试case，想保留测试db的，可以搞个&lt;code&gt;KEEP_DB&lt;/code&gt;环境变量。测试类会根据这个环境变量决定是否清理测试DB。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>rocksdb探究 - 一些问题</title>
      <link>/posts/db_some_questions_about_rocksdb/</link>
      <pubDate>Tue, 07 Jan 2020 21:26:49 +0800</pubDate>
      
      <guid>/posts/db_some_questions_about_rocksdb/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;写请求batch内的多个操作是否会被拆开，为什么？&lt;/li&gt;
&lt;li&gt;block-cache里的缓存项是否会因为某个sst被compact而失效？&lt;/li&gt;
&lt;li&gt;event-listener的实现&lt;/li&gt;
&lt;li&gt;perf-context的实现&lt;/li&gt;
&lt;li&gt;ThreadLocalPtr的实现以及为什么&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>
